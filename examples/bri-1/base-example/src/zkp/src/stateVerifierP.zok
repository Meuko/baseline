import "hashes/pedersen/512bit" as pd
import "utils/pack/u32/pack128" as pack128
import "utils/pack/u32/unpack128" as unpack128

def main(private field State, private field MJ_ID, private field SupplierID, private field DocHash1, private field DocHash2, private field ContractH1, private field ContractH2, private field LC1, private field LC2, private field NC1, private field NC2) -> (field, field):
    field a = if (State == 1 || State == 2 || State == 5) && ContractH1 == State && ContractH2 == State && SupplierID == State && DocHash1 == State && DocHash2 == State then 0 else 1 fi
    field b = a * ContractH1
    field c = a * ContractH2
    field d = a * SupplierID
    field e = a * DocHash1
    field f = a * DocHash2
    
    field g = if (State == 3 || State == 4) && DocHash1 != ContractH1 && DocHash2 != ContractH2 then 1 else 0 fi
    field h = g * b
    field k = g * c
    
    u32[16] preHash1 = [...unpack128(State), ...unpack128(MJ_ID), ...unpack128(d), ...unpack128(LC1)]
    u32[16] preHash2 = [...unpack128(e), ...unpack128(f), ...unpack128(h), ...unpack128(LC2)]
    
    u32[8] Hash1P = pd(preHash1)
    u32[8] Hash2P = pd(preHash2)
    
    u32[16] NewHash = [...Hash1P[0..4], ...Hash1P[4..8], ...Hash2P[0..4], ...Hash1P[4..8]]
    
    u32[8] NewHashP = pd(NewHash)
    field[2] NewHashField = [pack128([...NewHashP[0..4]]), pack128([...NewHashP[4..8]])]
    
    assert(NewHashField[0] == NC1)
    assert(NewHashField[1] == NC2)
    
    return MJ_ID, State
